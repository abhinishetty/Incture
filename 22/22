
function evaluateExpression(expr, variables, values) {
    // Replace variables with their values
    for (let i = 0; i < variables.length; i++) {
        const regex = new RegExp(`\\b${variables[i]}\\b`, 'g');
        expr = expr.replace(regex, values[i]);
    }

    // Replace sqrt(...) with Math.sqrt(...)
    expr = expr.replace(/sqrt\s*\(/g, 'Math.sqrt(');

    try {
        const result = eval(expr);
        // If result is NaN or imaginary (e.g., sqrt of negative)
        if (isNaN(result)) return -1;
        return Math.round(result * 100) / 100;
    } catch {
        return -1;
    }
}


(or)

function evaluateExpression(expr, vars, vals) {
  for (let i = 0; i < vars.length; i++) {
    expr = expr.replace(new RegExp(`\\b${vars[i]}\\b`, 'g'), vals[i]);
  }
  expr = expr.replace(/sqrt\s*\(/g, 'Math.sqrt(');
  let result = Function(`return ${expr}`)();
  return isNaN(result) ? -1 : Math.round(result * 100) / 100;
}

====================
create react app using vite

https://dev.to/teyim/effortless-testing-setup-for-react-with-vite-typescript-jest-and-react-testing-library-1c48

npm install -D jest @testing-library/react ts-jest @types/jest ts-node @testing-library/jest-dom jest-environment-jsdom @testing-library/user-event
jest.setup.ts
import "@testing-library/jest-dom";
jest.config.js
export default {
  testEnvironment: "jsdom",
  transform: {
    "^.+\\.tsx?$": "ts-jest",
  },
  setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
};

inside pacage .json inside styles  write this  "test":"jest",
    "coverage":"jest --coverage" hence,
"scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test":"jest",
    "coverage":"jest --coverage"
  },

https://jestjs.io/docs/tutorial-react
npm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer

babel.config.js =>rename babel.config.cjs

module.exports = {
  presets: [
    '@babel/preset-env',
    ['@babel/preset-react', {runtime: 'automatic'}],
  ],
};


