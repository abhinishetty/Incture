06.08.2025          API

Rest API: REST stands for Representational State Transfer.

Statelessness

JSON: 
Postman

Status: 3 digit number
 HTTP status codes:

200 OK — Success, data returned

201 Created — Resource created successfully

204 No Content — Success, no data to return

400 Bad Request — Client sent invalid request

401 Unauthorized — Authentication required or failed

500 Internal Server Error — Server encountered an error





import { useState, useEffect } from "react";

function UserList() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")   //check by putting wrong url
      .then((response) => {
        if (!response.ok) {
          throw new Error("Something went wrong...");
        }
        return response.json();
      })
      .then((data) => {
        setUsers(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return <p>Loading user details... Please wait a moment.</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return (
    <div>
      <h1>User List</h1>
      <ul>
        {users.map((user) => (
          <li key={user.id}>
            <strong>{user.name}</strong> — {user.email}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default UserList;
=
//import Counter from './components/Counter'
import ProductList from './components/ProductList'
import Cart from './components/Cart'
import './App.css'
import UserList from './api/User'

function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <UserList/>
  </div>
 )
}

export default App

=================================

import { useState } from "react";

function SecondUserList(){

 const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);   
  const [error, setError] = useState(null);

 
     const fetchData= ()=> {fetch("https://jsonplaceholder.typicode.com/users")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Something went wrong...");
        }
        return response.json();
      })
      .then((data) => {
        setUsers(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setLoading(false);
      });
    }

//   if (loading) {
//     return <p>Loading user details... Please wait a moment.</p>;
//   }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return (
    <div>
      <h1>User List</h1>
      <button onClick={fetchData}> Fetch user</button>
      <ul>
        {users.map((user) => (
          <li key={user.id}>
            <strong>{user.name}</strong> — {user.email}
          </li>
        ))}
      </ul>
    </div>
  );


}
export default SecondUserList

=

import SecondUserList from './api/SecondUsserList'

function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <SecondUserList/>
  </div>
 )
}

export default App

without useEffect

=====================


Axios:promise based http client thatis used because of its cleaner syntax and additional features compated to fetch
npm install axios

import { useState,useEffect } from "react";
import axios from "axios";
const UserListAxios=()=>{

 const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(()=>{
axios.get("https://jsonplaceholder.typicode.com/users")
.then((response)=>{
setUsers(response.data);
setLoading(false)

})
.catch((error)=>{
    setError(error.message);
    setLoading(false)
})
  },[])

  if (loading) {
    return <p>Loading user details... </p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return(
    <div>
        <h2>User List With Axios</h2>
        <ul>
            {users.map((user)=>(
                <li key={user.id}><strong>{user.name}</strong> —  {user.email}</li>
            ))}
        </ul>
    </div>
  )
}

export default UserListAxios
=

import UserListAxios from './api/UserListAxios'
function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <UserListAxios/>
  </div>
 )
}

export default App
==========================

MiddleWare:
Middleware is software that sits between two systems or layers and processes data or requests before passing them along.

npm install redux-thunk

import { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { fetchUsers } from "./userAction";

function Fetch() {

  const { users, loading, error } = useSelector(state => state);

  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchUsers());
  }, [dispatch]);

  if (loading) {
    return <p>Loading user details...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return (
    <div>
      <h2>Users from API</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            <strong>{user.name}</strong> - {user.email}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Fetch;

=

export const FETCH_USER_REQUEST = "FETCH_USER_REQUEST";
export const FETCH_USER_SUCCESS = "FETCH_USER_SUCCESS"; 
export const FETCH_USER_FAILURE = "FETCH_USER_FAILURE";

export const fetchUsers = () => {
  return async (dispatch) => {
    dispatch({ type: FETCH_USER_REQUEST });
    try {
      const res = await fetch("https://jsonplaceholder.typicode.com/users");
      const data = await res.json();
      dispatch({ type: FETCH_USER_SUCCESS, payload: data });  
    } catch (error) {
      dispatch({ type: FETCH_USER_FAILURE, payload: error.message });
    }
  };
};

=
import {
  FETCH_USER_FAILURE,
  FETCH_USER_REQUEST,
  FETCH_USER_SUCCESS,  
} from "./userAction";

const initialState = {
  loading: false,
  users: [],
  error: "",
};

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_USER_REQUEST:
      return {
        ...state,
        loading: true,
      };

    case FETCH_USER_SUCCESS:  
      return {
        ...state,        
        loading: false,
        users: action.payload,  
        error: "",
      };

    case FETCH_USER_FAILURE:
      return {
        ...state,
        loading: false,
        users: [],
        error: action.payload,
      };

    default:
      return state;
  }
};

export default userReducer;

=
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider } from 'react-redux'
import './index.css'
import App from './App.jsx'
import { store } from './middleware/store.js'

createRoot(document.getElementById('root')).render(
  <Provider store={store}>
<App/> 

    </Provider>
)

=
import Fetch from "./middleware/Fetch"
function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <Fetch/>
  </div>
 )
}

export default App

===================================

Error handling

function FirstError(props){
   
    return(
        <div>
            <h2>This is a first component From Error</h2>
            <h3>{props.name}</h3>
        </div>
    )
}
export default FirstError

=
import FirstError from "./error/FirstError"
function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <FirstError name="Abhini"/>
  </div>
 )
}

export default App

===============================
function FirstError(props){
    throw new Error("Somethingsss broken................")
    return(
        <div>
            <h2>This is a first component From Error</h2>
            <h3>{props.name}</h3>
        </div>
    )
}
export default FirstError
=
import FirstError from "./error/FirstError"
function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <FirstError name="Abhini"/>
  </div>
 )
}

export default App

==============================================

function FirstError(props){
    try{
    throw new Error("Somethingsss broken................")  //
    }
    catch(error){
return <p>Some Error Occured in First Error Component.......</p>
    }
    return(
        <div>
            <h2>This is a first component From Error</h2>
            <h3>{props.name}</h3>
        </div>
    )
}
export default FirstError
If an error is thrown, the component renders the error message from the catch block.
If no error occurs, it renders the normal JSX with the heading and name.

=
import FirstError from "./error/FirstError"
function App() {
 return(
  <div>
  <h1>API Fetching IN React</h1>  
  <FirstError name="Abhini"/>
  </div>
 )
}

export default App


===============================================
src/
│
├── api/
│   ├── User.jsx                # Fetch API with useEffect
│   ├── SecondUserList.jsx      # Fetch API with manual fetch button
│   └── UserListAxios.jsx       # Axios fetch API example
│
├── middleware/
│   ├── store.js                # Redux store with thunk
│   ├── userAction.js           # Redux async actions
│   ├── userReducer.js          # Redux reducer
│   └── Fetch.jsx               # React component using Redux state
│
├── error/
│   └── FirstError.jsx          # Error handling example component
│
├── App.jsx                     # Main app component (switch imports as needed)
├── index.jsx                   # React DOM render + Redux Provider
└── ...
